Lattice element naming conventions:

Nth Multipass:  
  <name>!mp<N>

Superimpose:
  <name1>!<name2>
  <name>!s<N>


------------------------------------------------------------------------------------
Coordinate System Names:

* Global coordinates  -- (X,Y,Z) Same as existing
* Body coordinates  -- (x,y,z) Same as existing
* Machine coordinates -- (x,y,s) curvilinear coordinates with s measured from the start of the lattice branch. 
* Local coordinates -- (x,y,s) curvilinear coordinates. Same as machine coordinates with s measured from upstream end of element. 

Currently machine coords are called Laboratory coordinates or Local coordinates. 
Note: Will be left handed for elements with orientation = -1.

Machine coords, Local coords: Upstream, Center, Downstream
Body coords: Entrance, Center, Exit

------------------------------------------------------------------------------------
Superimpose:

Difference: offset relative to body coordinates not 

------------------------------------------------------------------------------------
Lattice element selection:

The following is for Bmad standard element matching. See below for Julia regex matching.

*** Bmad Standard Element Matching Strings ***

An element match string (which can match to multiple elements) can be of the form:
  {branch_id>>}ele_id{#N}{+/-offset}
or
  {branch_id>>}attribute->match_str{+/-offset}

Where
  branch_id -- Name or index of branch. May contain the wild cards "*" and "%".
  ele_id    -- Name or index of element. May contain the wild cards "*" and "%".
                If a name and no branch is given, all branches are searched.
                If an index and no branch is given, branch 1 is assumed.
  attribute -- Element string attribute. 
                Standard string attributes are "type", "alias", "descrip".
  match_str -- Match string. Needs to be in quotes if there is a blank space or
                match string has a "+" or "-" in it.
  #N        -- N = integer. N^th instance of element matching ele_id in branch.
  +/-offset -- Element offset. For example, "Q1+1" is the element after "Q1" and 
                "Q1-2" is the second element before "Q1".

Examples:
  Marker::a*#2         2^nd marker element in each branch whose name begins with "a".
  "x_br>>q*"           All quadrupoles of branch "x_br" whose name begins with "q"
  "type->'^bpm'"       All elements whose :type attribute starts with bpm. 
  "alias->'my duck'"   Match to all elements whose :alias attribute has"my duck" in the string.
  "alias->\"my duck\"" Same as previous.

Note: Single-quotes can be used. Double-quotes must be excaped with a backslash
as shown above.


*** Bmad Standard Element lists ***

Element lists are an array of element matching strings as discussed above with a comma
between elements.

Example:
  q1*, q2+1, lords>>m3, type->outer


*** Bmad Standard Element Ranges ***

An element range is of the form:
  {key::}ele1:ele2
Where:
  key      -- Optional key name ("Quadrupole", "Sbend", etc.). 
  ele1     -- Starting element of the range.
  ele2     -- Ending element of the range. 
The range includes ele1 and ele2.
If ele2[ix_ele] < ele1[ix_ele], the range wraps around the ends of the lattice. That is, the range is
  [ele1[ix_ele], branch[n_ele]] + [0, ele2[ix_ele]]
Note: ele1 and ele2 must be in the same branch.
If ele1 or ele2 is a super_lord, the elements in the range are determined by the position of the super_slave elements.
For example, if loc_str is "Q1:Q1" and Q1 is *not* a super_lord, the eles list will simply be Q1.
If Q1 is a super_lord, the eles list will be the super_slaves of Q1.
It is an error if ele1 or ele2 is a multipass_lord. Also it is is an error for ele1 or ele2
to be an overlay, group, or girder if the number of slaves is not one. 

Examples:
  Quadrupole::x_br>>q* All quadrupoles of branch "x_br" whose name begins with "q"
  3,15:17              Elements with index 3, 15, 16, and 17 in branch 0.
  2>>45:51             Elements 45 through 51 of branch 2.
  q1:q5                Elements between "q1" and "q5".
  Sbend::q1:q5         All sbend elements between "q1" and "q5".

*** Bmad Standard Negation and Intersection ***

The negation character "~" signifies that elements are to be removed from the list. For example:
  "quadrupole::*, ~q3"
The element list would be all quadrupoles except quadrupoles named "Q3". Example:
  "*::*, ~Octupole::*, oct23"
Here the list would be all elements except the octupole elements that are not named "oct23".
This shows that order is important when negation is used since adding/subtracting elements from
the list is done left to right.

An ampersand "&" can be used to form the intersection of two groups.
Example:
  1:10 & BPM*   All element with index in range [1,10] and with name starting with "BPM".

*** Julia Regex ***

Julia regex is
  {branch_id>>}regex
or
  {branch_id>>}attribute->regex

------------------------------------------------------------------------------------
Programming Conventions

Generally Follow Julia standard conventions (see Julia manual) except:
* Indentation is two spaces not four.

Other conventions:
* Specify AbstractString instead of String for function arguments to avoid incompatibility
with the SubString type.

Documentation guidelines:
See:  https://juliareach.github.io/JuliaReachDevDocs/latest/guidelines/

------------------------------------------------------------------------------------
Makie for Plotting

GLMakie uses GLFW.jl backend.
CairoMakie uses Cairo.jl backend.

For interactive plotting use GLMakie (CairoMakie is not interactive)
For (2D) Axis plots:
  Zoom to rectangle: Select rectangle using left button click-and-hold, move mouse, release button.
  Zoom in/out: Middle button scroll.
  Zoom to original size: Control and left button double click at same time.
  Pan: right button click-and-hold, move mouse.

CarioMakie (but not GLMakie) can export vector graphics via pdf (which is nicer than bitmapped):
  save("this_fig.pdf", f)  # Save to file.

Switch between GLMakie and CairoMakie via using statements:
  using GLMakie
  f = Figure()
  ... make graph ...
  f                        # Plot with GL
  using CairoMakie         # Switch to CairoMakie
  save("this_fig.pdf", f)  # Save to file.

Also consider Plots.jl. See:
  https://www.juliabloggers.com/summary-of-julia-plotting-packages/

