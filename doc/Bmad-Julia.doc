Lattice element naming conventions:

Nth Multipass:  
  <name>!mp<N>

Superimpose:
  <name1>!<name2>
  <name>!s<N>

Selection of Nth element of like name:
  <name>#<N>


------------------------------------------------------------------------------------
Lattice element selection:

*** Element Name ***

An element "name" (which can match to multiple elements) can be of the form:
  {branch_id>>}ele_id{##N}{+/-offset}
or
  {branch_id>>}attribute->match_str{+/-offset}

Where
  branch_id -- Name or index of branch. May contain the wild cards "*" and "%".
  ele_id    -- Name or index of element. May contain the wild cards "*" and "%".
                If a name and no branch is given, all branches are searched.
                If an index and no branch is given, branch 1 is assumed.
  attribute -- Element string attribute. 
                Standard string attributes are "type", "alias", "descrip".
  match_str -- Match string. Needs to be in quotes if there is a blank space or
                match string has a "+" or "-" in it.
  ##N       -- N = integer. N^th instance of element in the branch.
  +/-offset -- Element offset. For example, "Q1+1" is the element after "Q1" and 
                "Q1-2" is the second element before "Q1".

Examples:
  "x_br>>q*"           All quadrupoles of branch "x_br" whose name begins with "q"
  "type->'^bpm'"       All elements whose :type attribute starts with bpm. 
  "alias->'my duck'"   Match to all elements whose :alias attribute has"my duck" in the string.
  "alias->\"my duck\"" Same as previous.

Note: Single-quotes can be used. Double-quotes must be excaped with a backslash
as shown above.


*** Element lists ***

Element lists are formed using a space or a comma

Examples:
  Quadrupole::x_br>>q* All quadrupoles of branch "x_br" whose name begins with "q"
  3,15:17              Elements with index 3, 15, 16, and 17 in branch 0.
  2>>45:51             Elements 45 through 51 of branch 2.
  q1:q5                Elements between "q1" and "q5".
  Sbend::q1:q5         All sbend elements between "q1" and "q5".
  Marker::a*#2         2^nd marker element in each branch whose name begins with "a".




A space or a comma delimits the elements.
An ampersand "&" can be used to form the intersection of two groups.






An element range is of the form:
  {key::}ele1:ele2
Where:
  key      -- Optional key name ("Quadrupole", "Sbend", etc.). 
  ele1     -- Starting element of the range.
  ele2     -- Ending element of the range. 
The range includes ele1 and ele2.
If ele2[ix_ele] < ele1[ix_ele], the range wraps around the ends of the lattice. That is, the range is
  [ele1[ix_ele], branch[n_ele]] + [0, ele2[ix_ele]]
Note: ele1 and ele2 must be in the same branch.
If ele1 or ele2 is a super_lord, the elements in the range are determined by the position of the super_slave elements.
For example, if loc_str is "Q1:Q1" and Q1 is *not* a super_lord, the eles list will simply be Q1.
If Q1 is a super_lord, the eles list will be the super_slaves of Q1.
It is an error if ele1 or ele2 is a multipass_lord. Also it is is an error for ele1 or ele2
to be an overlay, group, or girder if the number of slaves is not one. 

Note: Use quotation marks for matching to type, alias, or descrip strings that have a blank.
Note: matching is always case insensitive.

Examples:
  Quadrupole::x_br>>q* All quadrupoles of branch "x_br" whose name begins with "q"
  3,15:17              Elements with index 3, 15, 16, and 17 in branch 0.
  2>>45:51             Elements 45 through 51 of branch 2.
  q1:q5                Elements between "q1" and "q5".
  Sbend::q1:q5         All sbend elements between "q1" and "q5".
  Marker::a*#2         2^nd marker element in each branch whose name begins with "a".
  type->"^bpm"         All elements whose :type field starts with bpm. 
  alias->"my duck"     Match to all elements whose :alias field has"my duck" in the string.

The negation character "~" signifies that elements are to be removed from the list. For example:
  "quadrupole::*, ~q3"
The element list would be all quadrupoles except quadrupoles named "Q3". Example:
  "*::*, ~Octupole::*, oct23"
Here the list would be all elements except the octupole elements that are not named "oct23".
This shows that order is important when negation is used since adding/subtracting elements from
the list is done left to right.

An ampersand "&" can be used to form the intersection of two groups.
Example:
  1:10 & BPM*   All element with index in range [1,10] and with name starting with "BPM".

Note: For something like loc_str = "quad::*", if order_by_index = True, the eles(:) array will
be ordered by element index. If order_by_index = False, the eles(:) array will be ordered by
s-position. This is the same as order by index except in the case where where there are super_lord
elements. Since super_lord elements always have a greater index (at least in branch 0), order by index
will place any super_lord elements at the end of the list.
!
Note: When there are multiple element names in loc_str (which will be separated by a comma or blank), 
the elements in the eles(:) array will be in the same order as they appear loc_str. For example,
with loc_str = "quad::*,sbend::*", all the quadrupoles will appear in eles(:) before all of the sbends.
This is independent of the setting of order_by_index but the setting of order_by_index can affect
the ordering of the quads among themselves and the ordering of the sbends among themselves.


------------------------------------------------------------------------------------
Programming Conventions

Generally Follow Julia standard conventions (see Julia manual) except:
* Indentation is two spaces not four.

Other conventions:
* Specify AbstractString instead of String for function arguments to avoid incompatibility
with the SubString type.

